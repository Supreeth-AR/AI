import heapq

class PuzzleState:
    def __init__(self, board, zero_pos, moves=0, parent=None):
        self.board = board
        self.zero_pos = zero_pos
        self.moves = moves
        self.parent = parent
        self.cost = self.moves + self.heuristic()

    def heuristic(self):
        """Calculate the Manhattan distance as the heuristic."""
        return self.manhattan_distance()

    def manhattan_distance(self):
        """Compute the Manhattan distance for the current board state."""
        distance = 0
        for i in range(3):
            for j in range(3):
                tile = self.board[i][j]
                if tile != 0:  # Exclude the empty space
                    target_x = (tile - 1) // 3
                    target_y = (tile - 1) % 3
                    distance += abs(target_x - i) + abs(target_y - j)
        return distance

    def generate_successors(self):
        """Generate successor states by moving the empty tile (0)."""
        successors = []
        x, y = self.zero_pos
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]  # down, up, right, left
        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:  # within bounds
                new_board = [row[:] for row in self.board]  # Deep copy
                new_board[x][y], new_board[new_x][new_y] = new_board[new_x][new_y], new_board[x][y]
                successors.append(PuzzleState(new_board, (new_x, new_y), self.moves + 1, self))
        return successors

    def __lt__(self, other):
        return self.cost < other.cost

def a_star(start_board, goal_board):
    """Implement A* search algorithm."""
    zero_pos = next((i, j) for i in range(3) for j in range(3) if start_board[i][j] == 0)
    start_state = PuzzleState(start_board, zero_pos)

    open_set = []
    heapq.heappush(open_set, start_state)
    closed_set = set()

    while open_set:
        current_state = heapq.heappop(open_set)

        if current_state.board == goal_board:
            return current_state

        closed_set.add(tuple(map(tuple, current_state.board)))

        for successor in current_state.generate_successors():
            if tuple(map(tuple, successor.board)) in closed_set:
                continue
            
            heapq.heappush(open_set, successor)

    return None  # No solution found

def print_solution(solution):
    """Print the solution path."""
    path = []
    while solution:
        path.append(solution.board)
        solution = solution.parent
    for state in reversed(path):
        for row in state:
            print(row)
        print()

def get_board_input(prompt):
    """Get board configuration from user input."""
    board = []
    print(prompt)
    for i in range(3):
        while True:
            row = input(f"Row {i + 1} (space-separated numbers): ").strip().split()
            if len(row) == 3 and all(num.isdigit() and 0 <= int(num) <= 8 for num in row):
                board.append([int(num) for num in row])
                break
            else:
                print("Invalid input. Please enter three numbers (0-8) for each row.")
    return board

# Main execution
if __name__ == "__main__":
    initial_board = get_board_input("Enter the initial board configuration (use 0 for the empty space):")
    goal_board = get_board_input("Enter the goal board configuration (use 0 for the empty space):")

    solution = a_star(initial_board, goal_board)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")
