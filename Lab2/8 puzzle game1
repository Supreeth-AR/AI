import random
n = 3
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  

def print_board(board):
    for row in board:
        print(" ".join(str(x) for x in row))
    print()

def find_empty_tile(board):
    for i in range(n):
        for j in range(n):
            if board[i][j] == 0:
                return i, j

def is_solvable(board):
    flat_board = [num for row in board for num in row if num != 0]
    inversions = sum(1 for i in range(len(flat_board)) for j in range(i + 1, len(flat_board)) if flat_board[i] > flat_board[j])
    return inversions % 2 == 0

def make_move(board, empty_pos, new_pos):
    new_board = [row[:] for row in board]  # Create a copy of the board
    x1, y1 = empty_pos
    x2, y2 = new_pos
    new_board[x1][y1], new_board[x2][y2] = new_board[x2][y2], new_board[x1][y1]
    return new_board

def get_possible_moves(empty_pos):
    x, y = empty_pos
    possible_moves = []
    if x > 0: possible_moves.append((x - 1, y))  # Up
    if x < n - 1: possible_moves.append((x + 1, y))  # Down
    if y > 0: possible_moves.append((x, y - 1))  # Left
    if y < n - 1: possible_moves.append((x, y + 1))  # Right
    return possible_moves

def shuffle_board(board):
    empty_pos = find_empty_tile(board)
    moves = get_possible_moves(empty_pos)
    for _ in range(100):  # Shuffle the board
        move = random.choice(moves)
        board = make_move(board, empty_pos, move)
        empty_pos = move
        moves = get_possible_moves(empty_pos)
    return board

def play_game():
    board = shuffle_board(goal_state)
    print("Welcome to the 8-Puzzle Game!")
    print("Arrange the tiles in ascending order. Use '0' for the empty space.")
    
    while True:
        print_board(board)
        empty_pos = find_empty_tile(board)
        possible_moves = get_possible_moves(empty_pos)

        move_str = input("Enter the tile number to move (or 'exit' to quit): ")
        if move_str.lower() == 'exit':
            print("Thanks for playing!")
            break
        
        if move_str.isdigit():
            tile = int(move_str)
            if tile in [board[x][y] for x, y in possible_moves]:
                new_pos = next((x, y) for x, y in possible_moves if board[x][y] == tile)
                board = make_move(board, empty_pos, new_pos)
            else:
                print("Invalid move! Try again.")
        else:
            print("Please enter a valid tile number.")

        if board == goal_state:
            print_board(board)
            print("Congratulations! You've solved the puzzle!")
            break

play_game()
